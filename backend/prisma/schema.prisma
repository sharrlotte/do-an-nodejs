generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id         Int       @id @default(autoincrement())
    userId     Int
    provider   String
    providerId String
    updatedAt  DateTime? @db.Timestamp(6)
    createdAt  DateTime  @db.Timestamp(6)
    user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([providerId])
    @@index([provider])
    @@index([userId])
}

// User Novel library model link between User and Novel
model NovelLibrary {
    id      Int   @id @default(autoincrement())
    userId  Int
    novelId Int
    novel   Novel @relation(fields: [novelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user    User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([userId, novelId])
    @@index([userId, novelId])
}

model ReadHistory {
    id        Int      @id @default(autoincrement())
    userId    Int
    novelId   Int
    chapterId Int
    novel     Novel    @relation(fields: [novelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    chapter   Chapter  @relation(fields: [chapterId], references: [id])
    createdAt DateTime @default(now()) @db.Timestamp(6)

    @@unique([userId, novelId])
    @@index([userId, novelId])
}

// Model for comment on chapter
model Comment {
    id        Int       @id @default(autoincrement())
    content   String
    updatedAt DateTime? @db.Timestamp(6)
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    userId    Int
    chapterId Int?
    novelId   Int

    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    novel     Novel    @relation(fields: [novelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    commentId Int?

    @@index([novelId])
    @@index([chapterId])
    @@index([userId])
}

model Novel {
    id           Int       @id @default(autoincrement())
    title        String
    description  String
    imageUrl     String
    src          String    @unique
    srcUpdated   DateTime? @db.Timestamp(6)
    updatedAt    DateTime? @default(now()) @db.Timestamp(6)
    createdAt    DateTime  @default(now()) @db.Timestamp(6)
    followCount  Int       @default(0)
    commentCount Int       @default(0)
    chapterCount Int       @default(0)
    chapters     Chapter[]
    Comment      Comment[]

    NovelLibrary NovelLibrary[]
    ReadHistory  ReadHistory[]
}

model Chapter {
    id           Int           @id @default(autoincrement())
    title        String
    index        Int
    src          String        @unique
    content      String[]
    updatedAt    DateTime?     @db.Timestamp(6)
    createdAt    DateTime      @default(now()) @db.Timestamp(6)
    commentCount Int           @default(0)
    novelId      Int
    novel        Novel         @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    Comment      Comment[]
    ReadHistory  ReadHistory[]

    @@index([novelId])
    @@index([index])
}

model Authority {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    description     String
    updatedAt       DateTime?       @db.Timestamp(6)
    createdAt       DateTime        @db.Timestamp(6)
    userAuthorities UserAuthority[]
    roleAuthorities RoleAuthority[]

    @@index([name])
}

model Role {
    id              Int             @id @default(autoincrement())
    name            String          @unique
    description     String
    updatedAt       DateTime?       @db.Timestamp(6)
    createdAt       DateTime        @db.Timestamp(6)
    userRoles       UserRole[]
    roleAuthorities RoleAuthority[]

    @@index([name])
}

model User {
    id          Int             @id @default(autoincrement())
    username    String
    about       String
    updatedAt   DateTime?       @db.Timestamp(6)
    createdAt   DateTime        @db.Timestamp(6)
    avatar      String?
    accounts    Account[]
    authorities UserAuthority[]
    roles       UserRole[]

    Comment      Comment[]
    NovelLibrary NovelLibrary[]
    ReadHistory  ReadHistory[]
}

model UserAuthority {
    userId      Int
    authorityId Int
    createdAt   DateTime  @db.Timestamp(6)
    authority   Authority @relation(fields: [authorityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, authorityId])
    @@index([authorityId])
    @@index([userId])
}

model RoleAuthority {
    roleId      Int
    authorityId Int
    createdAt   DateTime  @db.Timestamp(6)
    authority   Authority @relation(fields: [authorityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    role        Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([roleId, authorityId])
    @@index([authorityId])
    @@index([roleId])
}

model UserRole {
    userId    Int
    roleId    Int
    createdAt DateTime @default(now()) @db.Timestamp(6)
    role      Role     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([userId, roleId])
    @@index([roleId])
    @@index([userId])
}
